
[{"content":"","date":"3000-06-05","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"3000-06-05","externalUrl":null,"permalink":"/","section":"IronShark","summary":"","title":"IronShark","type":"page"},{"content":"","date":"3000-06-05","externalUrl":null,"permalink":"/tags/nixos/","section":"Tags","summary":"","title":"NixOS,","type":"tags"},{"content":"","date":"3000-06-05","externalUrl":null,"permalink":"/tags/personal_configuration/","section":"Tags","summary":"","title":"Personal_Configuration","type":"tags"},{"content":"","date":"3000-06-05","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"3000-06-05","externalUrl":null,"permalink":"/series/rethinkrefactorrebuild./","section":"Series","summary":"","title":"Rethink,Refactor,Rebuild.","type":"series"},{"content":"","date":"3000-06-05","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"3000-06-05","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"3000-06-05","externalUrl":null,"permalink":"/categories/technology/","section":"Categories","summary":"","title":"Technology","type":"categories"},{"content":"","date":"3000-06-05","externalUrl":null,"permalink":"/posts/draft-rethinkrefactorrebuild-2/","section":"Posts","summary":"","title":"The Shell.","type":"posts"},{"content":"","date":"3000-01-01","externalUrl":null,"permalink":"/categories/art/","section":"Categories","summary":"","title":"Art","type":"categories"},{"content":"","date":"3000-01-01","externalUrl":null,"permalink":"/tags/art_for_beginners/","section":"Tags","summary":"","title":"Art_for_Beginners","type":"tags"},{"content":"","date":"3000-01-01","externalUrl":null,"permalink":"/tags/digital_art/","section":"Tags","summary":"","title":"Digital_Art,","type":"tags"},{"content":" Draft Post ","date":"3000-01-01","externalUrl":null,"permalink":"/posts/00-draft-template/","section":"Posts","summary":" Draft Post ","title":"Draft Post","type":"posts"},{"content":" Draft Post ","date":"3000-01-01","externalUrl":null,"permalink":"/posts/draft-2024-06-250-boxes-later/","section":"Posts","summary":" Draft Post ","title":"Draft Post","type":"posts"},{"content":" Draft Post ","date":"3000-01-01","externalUrl":null,"permalink":"/posts/draft-lfs-pt0/","section":"Posts","summary":" Draft Post ","title":"Draft Post","type":"posts"},{"content":"","date":"3000-01-01","externalUrl":null,"permalink":"/series/example_series/","section":"Series","summary":"","title":"Example_Series","type":"series"},{"content":"","date":"3000-01-01","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":" Foreword Early last year I wrote a series of posts describing how I was using NixOS, and Emacs to configure my work computer. In it I described how I set up EXWM as my window manager, and my attempts to make it all consistent and reproducible. While I was largely successful at this, and the set up worked well overall. Ultimately I found it to be a bit to fragile for everyday use.\nThis series documents the changes I made to address these challenges.\nThe Issues So to address the elephant in the room first, why did I stop using EXWM? To put it simply my Emacs hacking skills aren\u0026#39;t good enough to make it work comfortably, and the benifits I got from it didn\u0026#39;t justify the problems it caused. I frequently had problems with key passthrough. Hanging due to Emacs being single threaded. Generally it made things feel a bit clumsier. There were deffinately benifits, and I glad I got took the time to learn how to use it. Since I will be using the parts I liked as a template for my configuration going forward. Namely, a unified set of bindings to control all of my frequently used apps.\nThe other major change is the move away from a single Org-Mode based litterate configuration file. Again ultimately it just started to be unweildly to use. My configuration across NixOS and Emacs is several thousand lines long, and having all of that in a single file is … not fun. Plus the switch to the \u0026#34;modular\u0026#34; style configuration makes managing multiple machines much easier.\nHyprland My reason for Wayland over X is basically just that I have struggled with screen tearing for a long time, and Wayland fixes that. It was incredibly easy to configure on NixOS, basically just requiring programs.hyprland.enable = true; be added to my configuration.nix.\nThis change drastically reduced the complexity of both my NixOS and Emacs configuration, and generally. The only issue I have had with it is that Plover. A stenography program is not currently supporting Wayland. Configuration was handled using Nix Home-manager.\nRofi Rofi is a system application launcher, and is one of the main tools I am using to try and replicate the feel of EXWM. Generally it works well, with the only issue being that most plugins currently don\u0026#39;t work with the Wayland version. But those were not part of my current core use case. So I\u0026#39;m happy to continue on without the for the moment, and follow up on those in a few months when things get patched.\nNew Keyboard Layout I also revamped my keyboard layout to use fewer layers. Instead relying on key chords, and moving the x key to be near the index finger instead of the pinky. Both these changes make things a lot smoother for me. Allowing me to access symbols with a single action, and reducing stress on my pinky from heavy Emacs use.\nWhat\u0026#39;s next? Short term the next 3 or so post will be covering. Shell Tools. Including DASH, ZSH, Alacritty, LF, and all the supporting applications to go along with them. Then the biggest part of this whole project will be totally rebuilding my Emacs configuration. The last step will be unify the theme\u0026#39;s, and common input keys across all of the apps, and installing FFXIV.\nAll of those will be in their own follow up posts in this series.\n","date":"2024-05-31","externalUrl":null,"permalink":"/posts/2024-05-rethinkrefactorrebuild-1/","section":"Posts","summary":"Foreword Early last year I wrote a series of posts describing how I was using NixOS, and Emacs to configure my work computer. In it I described how I set up EXWM as my window manager, and my attempts to make it all consistent and reproducible.","title":"The Foundation. NixOS, and Hyprland.","type":"posts"},{"content":"","date":"2024-05-01","externalUrl":null,"permalink":"/tags/art_basics/","section":"Tags","summary":"","title":"Art_Basics,","type":"tags"},{"content":"","date":"2024-05-01","externalUrl":null,"permalink":"/series/art_fundamentals/","section":"Series","summary":"","title":"Art_Fundamentals","type":"series"},{"content":"","date":"2024-05-01","externalUrl":null,"permalink":"/tags/draw_a_box/","section":"Tags","summary":"","title":"Draw_A_Box","type":"tags"},{"content":" First Post in a Series While I have been dabbling with various forms of art for a while, I recently started taking it a lot more seriously. This series is meant to document my progress both with specific mediums, and with art more generally.\nBelow are the resources that I am going to use to build my foundational art skills. Each headline is a link. I will also briefly describe why I choose it and how I intend to incorporate it into my program. At the end I will give a general overview of how I hope things will progress.\nDraw A Box A Completely free online course. That focuses on the fundamentals of draftsmanship, perspective, and construction. It has both an official, and community critique program.\nOut of all the resources in the \u0026#34;Foundations\u0026#34; phase. This is the keystone that everything else is built around, and it will continue to be the starting point for the planning of future phases. Only \u0026#34;The Natural Way to Draw\u0026#34; will have a comparable presence in the overall scheduling.\nIt has a large and very active online community, and I have found it\u0026#39;s official critiques to be extremely useful.\nThe Natural Way to Draw A book originally written in the early 1900\u0026#39;s, by Kimon Nicolaïdes. It was finished after their death, and has some weakness\u0026#39; because of that. But it is still widely accepted as an excellent resource for beginner artists. It focuses on observation, composition, and rendering.\nThe main criticism that I have for this book is that it does a poor job of explaining the intent behind certain foundational exercises. That is largely why I added the next two books.\nMy hope is that by loosely pairing this with Draw A Box. That I will get exposure to the full range of fundamental illustration skills, and since they are both organized as scheduled programs. It keeps things simple, and prevents decision paralysis.\nDrawing on the right side of the brain This book is included almost entirely to make up for some of the weakness\u0026#39; of The Natural Way to Draw. Specifically I found it\u0026#39;s explanation of contour and blind contour drawing to be super useful. I did\u0026#39;nt do any of the exercises. But I would highly suggest reading through the whole thing as preparatory work for The Natural Way to Draw.\nFigure Drawing: Design and Invention Similarly to Drawing on the right side of the brain this book mostly acts to shore up a weakness is explaining gesture drawing in The Natural Way to Draw. The first 50 or so pages offer an excellent guide to the intent behind gesture. Especially when combined with Michael Hampton\u0026#39;s online lecture.\nAdditionally the second half of the book. Where they break down individual pieces of human anatomy for construction techniques, will be used in conjunction with the Draw A Box Lessons on construction.\nThe Overall Timeline The general plan is to start with the Draw A Box Lesson 0 reading, and then read \u0026#34;Figure Drawing: Design and Invention\u0026#34;, and \u0026#34;Drawing on the right side of the brain\u0026#34; while completing Lesson 1. Before finally combining \u0026#34;The Natural Way to Draw\u0026#34; schedules 1 - 4 with the Draw A Box 250 Box Challenge, and Lesson 2.\nThis is generally reflective of how I intend to build my study programming overall. With the core of the work being a combination of \u0026#34;Draw A Box\u0026#34;, and \u0026#34;The Natural Way to Draw\u0026#34;. With support given by additional resources based on the current focus.\n","date":"2024-05-01","externalUrl":null,"permalink":"/posts/2024-05-artfundamentals-1/","section":"Posts","summary":"First Post in a Series While I have been dabbling with various forms of art for a while, I recently started taking it a lot more seriously. This series is meant to document my progress both with specific mediums, and with art more generally.","title":"Getting Started with Art : Foundations","type":"posts"},{"content":"","date":"2024-05-01","externalUrl":null,"permalink":"/tags/illustration/","section":"Tags","summary":"","title":"Illustration,","type":"tags"},{"content":" TLDR This article describes how I have configured my Linux workstation using NixOS to learn the basics of digital art. Including installing Krita, and managing it\u0026#39;s config files. Configuring a user input devices, and managing completed projects with git.\nKrita Krita is a Free and Open Source drawing program, comparable to Photoshop or ClipStudio Paint. As a total beginner the idea of not having a subscription was really appealing to me. Krita is fully featured and supports all of the major tasks I would need to do. The main issue that I ran into was managing Krita\u0026#39;s configuration files. Krita is unsuprisingly managed via it\u0026#39;s GUI, and these files are changed each time you change something within Krita. The problem arises with how NixOS, manages these sort of files.\nI store all my configuration files in a single repository. These files are then added to the \u0026#34;Nix Store\u0026#34;, a collection of files used by the Nix package manager to build my user environment. With Krita I do this by targeting the files in my configuration repository with NixOS Home-Manager and telling it where to write the file to.\nhome.file.\u0026#34;kritarc\u0026#34; = { source = ./Krita/kritarc; target = \u0026#34;.config/kritarc\u0026#34;; }; The problem is that since these files are linked to the Nix Store and not my configuration repository, any changes I make to Krita will be overwritten the next time I update or rebuild my system. I got around this by creating script that copies the most recent version of my Krita files into my configuration repository immediately prior to each system rebuild.\nhome.file.\u0026#34;vortex-upgrade.sh\u0026#34; = { target = \u0026#34;.config/system-scripts/vortex-upgrade.sh\u0026#34;; executable = true; text = \u0026#39;\u0026#39; #!/bin/sh cd ~/Projects/Technonomicon/ cp -f ~/.config/kritarc Machine-Vortex/Que/Krita/kritarc cd - \u0026#39;\u0026#39;; }; Wacom Tablet I use a Wacom Intuos Pro drawing tablet. I strongly prefer non-screen tablets. As they tend to cause me to hunch over too much. It also affords a much larger drawing surface for a relatively low price. I have paired it with a Parblo Tablet Stand, which was surprisingly well built. This lets me keep the tablet elevated to encourage shoulder movement, and low enough that I can still reach the top of the drawing area comfortably.\nPro-Pen My Intuos came with a Wacom Pro Pen. I have made two major changes to it to make it more comfortable. First a set of Titanium Nibs. These were an immediate and massive improvement for me. I was going through a plastic nib every 1 - 2 days. With a noticeable improvement in comfort and consistency while drawing. The other is the addition of a Plus Ergo Grip. When I first started I was having a lot of issues with hand fatigue. This was a little awkward to get used to, but after a few hours was much more comfortable for extended holding than the standard pen.\nMoonLander The final addition was using the MoonLander keyboard, in the halfmoon configuration. I have a custom layout that allows me to easily preform the most common workflow actions.\nProject Management with Git ","date":"2023-01-15","externalUrl":null,"permalink":"/posts/2023-01-artonlinux/","section":"Posts","summary":"TLDR This article describes how I have configured my Linux workstation using NixOS to learn the basics of digital art. Including installing Krita, and managing it\u0026#39;s config files. Configuring a user input devices, and managing completed projects with git.","title":"Digital Art with NixOS","type":"posts"},{"content":"","date":"2022-12-28","externalUrl":null,"permalink":"/tags/emacs/","section":"Tags","summary":"","title":"Emacs","type":"tags"},{"content":"","date":"2022-12-28","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux,","type":"tags"},{"content":"","date":"2022-12-28","externalUrl":null,"permalink":"/tags/nix/","section":"Tags","summary":"","title":"Nix,","type":"tags"},{"content":" Introduction This article describes my attempts to create a set of https://leanpub.com/lit-config/read. With each file containing all the settings and customizations I use for a machine in a single location. In the hope that the highly documented nature of literate programming will allow better understanding and long term maintainability.\nAdditionally configuration files are often shared, or used as teaching tools. Ultimately my goal is for a non-programmer to be able to look through my configuration and understand what the pieces are doing. Even if they do not understand the programming language they are written in. To do this I am using a combination of the tools discussed below.\nNix I have been using NixOS for around four months, and have transitioned my primary workstation fully to the trifecta of https://nixos.org/, https://nixos.wiki/wiki/Flakes, and https://nixos.wiki/wiki/Home_Manager. This article wont this won\u0026#39;t discuss Flakes much as in this situation the Flake deals more with managing the repository that holds the collection of multiple configuration files. Eg. The https://github.com/Iron-Shark/Technonomicon contains both, the Vortex, and Voyager (still to be developed) single file configurations.\nNixOS supports the use of a declaratively configuration file, and Home-manager extends this further allowing you to manage the configuration of applications declaratively even if they do not normally support doing so. For those not familiar. https://www.wikiwand.com/en/Declarative_programming is the process of describing the final result that the program should produce, rather than the steps the computer should use to produce it. This makes a system using these to applications uniquely suited to this type of One File System layouts. These benifits manifest in a few major features.\nconfiguration.nix : By default NixOS supports a single centralized configuration file. This can be used manage most of the core systems level configuration options. Including Device Drivers and Services, System Language and Location, Users, and Security Permissions. It also allows you to specify a set of packages that will be available to all users. que.nix : Standard NixOS supports installing user specific packages as part of the configuration.nix file mentioned previously. However if you are using home-manager, from what I understand. It is generally considered best practice to separate all user related instructions into their own file. I name these after the user they are written for. Importantly in addition to allowing you to specify what packages should be installed, home-manger allows you to manage those applications. The uses of home-manager include :\nReplacing application specific dot files with home-manger options. This code replaces both the normal .gitconfig file, and the global .gitignore file.\nprograms.git = { package = pkgs.gitFull; enable = true; userName = \u0026#34;Que\u0026#34;; userEmail = \u0026#34;git@ironshark.org\u0026#34;; ignores = [ \u0026#34;*~\u0026#34; \u0026#34;.*~\u0026#34; \u0026#34;\u0026#39;#*#\u0026#39;\u0026#34; \u0026#34;.*.swp\u0026#34; ]; }; The ability to create a file in the users directory, to be used by other applications. This file can be used by another application. I prefer this over a normal symlink, becuase it places the file in the nix store. Removing the need to always have the source repository in the same location.\nhome.file.\u0026#34;polybar-CPU-temp.sh\u0026#34; = { target = \u0026#34;.config/polybar/polybar-CPU-temp.sh\u0026#34;; executable = true; text = \u0026#39;\u0026#39; #!/bin/sh sensors | grep \u0026#34;Package id 0:\u0026#34; | tr -d \u0026#39;+\u0026#39; | awk \u0026#39;{print $4}\u0026#39; \u0026#39;\u0026#39;; }; The ability to copy entire directories into the users home directory. I use this to place my Emacs configuration in my home directory, since it consists of several files and would be unwieldly to convert to Nix.\nhome.file.\u0026#34;emacs\u0026#34; = { source = ./Emacs; recursive = true; target = \u0026#34;.config/emacs\u0026#34;; }; Emacs \u0026amp; Org https://www.gnu.org/software/emacs/ and https://orgmode.org/ are the core of this project. Org-Mode is a Mark Up extension for Emacs. Supporting the use of multiple levels of sub-headings, hyperlinks, and more. Including embedded code blocks, and exporting those code blocks to external files. This process is called https://orgmode.org/manual/Working-with-Source-Code.html the file. It can be configured so that all the code blocks below a specific heading will go to the same target file. This, is the central design pattern of a single file configuration. Each Target file is tied to a heading level, with the headings below them describing the functions of the code contained by them.\nTo add a tangle target to a heading. You would use this code this sytle of properties block. Ignore the leading single quotes. \u0026#39;* Example Heading \u0026#39;:PROPERTIES: \u0026#39;:header-args: :tangle ~/path/to/target \u0026#39;:END: Then Use a normal Org-src block as shown below. I put this at the top of all my tangled files. Note: This warning is commented with # for nix. Ignore the leading single quotes. \u0026#39;#+begin_src nix \u0026#39;# WARNING : This file was generated by vortex.org \u0026#39;# DO NOT MODIFY THIS FILE! \u0026#39;# Any changes made here will be overwritten. \u0026#39;#+end_src When put together the whole thing looks like this. With all of the sub-heading being tangled to the same target file, specified in the top level heading. Ignore the leading single quotes. \u0026#39;* Example Heading \u0026#39;:PROPERTIES: \u0026#39;:header-args: :tangle ~/path/to/target \u0026#39;:END: \u0026#39;** Tangled File Warning \u0026#39;#+begin_src nix \u0026#39;# WARNING : This file was generated by vortex.org \u0026#39;# DO NOT MODIFY THIS FILE! \u0026#39;# Any changes made here will be overwritten. \u0026#39;#+end_src \u0026#39;** Other Sub-Heading 1 \u0026#39;Normal Text goes here. \u0026#39;** Other Sub-Heading 2 Any nomral text not included in the SRC-Blocks will not be tangled to the target file.\nTangling files can be done with either M-x org-babel-tangle, or it\u0026#39;s default hot key of C-c C-v t. Why use a single file configuration In addition to the benefits inherent with https://www.wikiwand.com/en/Literate_programming, this layout allows me to simplify the management of several files preforming similar functions. Rather than needing to move through an entire sub-directory within the flake repository. All of the files can be accessed and modified from the machine-name.org file. It also ties my Emacs configuration to my NixOS system generation in a meaningful way, something I would like to continue integrating. Also having a centralized \u0026#34;single source of truth\u0026#34;. Helps to make finding specific configuration options easier, and prevent duplicated or conflicting settings.\nOverall while there are definately more issues to be worked out. I am hopefull that this will be a worth while investment going forward.\nResources https://github.com/Iron-Shark/Technonomicon ","date":"2022-12-28","externalUrl":null,"permalink":"/posts/2023-01-onefileconfiguration/","section":"Posts","summary":"Introduction This article describes my attempts to create a set of https://leanpub.com/lit-config/read. With each file containing all the settings and customizations I use for a machine in a single location.","title":"One File System Configuration with NixOS and Emacs Org-Mode","type":"posts"},{"content":" Introduction In my experience, every hobby has a few core… disagreements. Usually these are small and relatively benign differences based on personal preference, with members of that community advocating for their prefered solution. Among programmers, text editor of choice is one of the more prominent ones. Vim, Visual Studio Code, Emacs, or any other solution you can imagine will have its own dedicated group of supporters. This post will discuss my preferred solution, and some of the features that make me choose it over other options.\n\u0026#34;A great operating system, lacking only a good text editor\u0026#34;. These are words often lobbed jokingly at Emacs users, I ironically agree. While definitely not an operating system, Emacs really starts to come into its own when you view it as a \u0026#39;productivity environment\u0026#39;. Rather than a simple text editor. Most of what I do with a computer involves text manipulation. Programming, email, discord/slack, web browsing, are all basically the same task. Each wrapped in a custom interface. Emacs gives me the ability to integrate all of these tasks into a single user interface, including shared shortcuts, hotkeys, and the use of macros or other programmatic interfaces provided by Emacs. This post is going to be the first in a series documenting my attempt to create a computer workflow that focuses on avoiding use of a mouse. Instead making use of these keyboard hotkeys, and shortcuts.\nEXWM, EVIL, and PolyBar To start with I wanted to discuss some terminology. Most of what someone interacts with, when using a computer is a part of the \u0026#34;display environment\u0026#34;. Some operating systems can be configured to use one of several display environments, or something known as a \u0026#34;window manager\u0026#34;. Which performs a similar function to a display environment though in a much more minimal way. Window managers generally do not include things like wifi managers, volume or brightness controls, or other GUI (graphical user interface) applications to configure the system. Tiling window managers, take this minimalism further by removing the need to use a mouse to position application windows. Instead locking them together as part of a larger grid, and using hotkeys to adjust how the screen is divided among these tiles. EXWM (Emacs X Window Manager) is one such tiling window manager.\nEXWM is an Emacs package that I installed using straight.el. A functional package manager internal to Emacs. It uses the Emacs-Daemon to contain other applications inside an Emacs Frame. Allowing you to use your normal Emacs inputs to interact with non-Emacs programs. This includes rearranging windows, copy, paste, registers, and more generally it homogenizes how I interact with a variety of programs. Eventually, I plan to further extend this with applications like Xkey-snail. Which allows you to mask non-Emacs hot-keys under Emacs Commands. Currently the one major downside of EXWM is that Emacs is single threaded. Meaning that performing certain operations can freeze your entire system until that operation has completed. However there is an ongoing project to update Emacs to multi-threading, and I have not actually encountered a lock up in real world use.\nVisually EXWM is hugely customizable. Currently in addition to the Emacs Mode-Line displaying file specific information at the bottom of each buffer. I use PolyBar to display system wide information, like which workspace is currently active, RAM and CPU usage, and the date and time. Configuring PolyBar to match my Emacs theme was easy, and while I still have a lot I would like to do to further refine both. I was able to get something visually pleasing, and functional in just a couple of hours of tinkering.\nhttps://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/Banners/deskTop.png?raw=true An example screenshot of my Desktop\nI wanted to address one other thing as a part of this post. Text editing with Emacs. Now as I said earlier, I largely agree that Emacs on it\u0026#39;s own, is not the best choice of text editor. I find the Emacs chord system to be a bit clunky for the most commonly used text editing commands, and honestly I think modal editing as offered by Vim is better… So thats what I use. Emacs EVIL (Extensible VI Layer), adds modal inputs to the normal Emacs text editing modes. For me this is the perfect solution, as it allows me to use the modal inputs for the most commonly used commands that often need to be used multiple times or in multiple combinations in quick succession. While still having the Emacs key chords, and longer form \u0026#39;M-x\u0026#39; style input for less commonly used, or system level commands.\nFinal Thoughts I still have a ton of work left to get everything to how I ultimately want it to be, but I hope this process shows one of the greatest strengths of both Linux, and Emacs. Extensibility. The ability to configure, or even replace some of the core functionality of a piece of software so that it works in a way that is specifically beneficial to me and my workflow. I will admit though that this process is not necessarily beginner friendly. While the Linux community has made huge inroads towards being more usable by non-technical people, this level of customization can still take a significant amount of work. Reading documentation, troubleshooting conflicts caused by changes, or even just learning what you actually need the software to do, and how to get it to do it. All of these will take time, but in my opinion are absolutely worth the effort.\nIf you are interested in trying a setup like this for yourself, consider checking out my posts with the \u0026#34;Linux for beginners\u0026#34; tag to see how you can get a Linux VM running with very little effort on a Windows computer. If you are specifically interested in EXWM, I would strongly recommend getting experience with normal Emacs first. While WSL does not support EXWM, it can be used to learn the core Emacs Usage. Lastly, if you are interested in learning more about EVIL or Modal editing, I suggest checking out the tutor built into Vim, or Doom Emacs. Which is a preconfigured version of Emacs that includes EVIL and simplifies a lot of basic configuration. Links found Below.\nResources Config Files https://github.com/Iron-Shark/Technonomicon Show my complete current configuration. https://nixos.org/ Adding this to Configuration.nix enables EXWM. services.xserver.displayManager.lightdm.enable = true; services.xserver.windowManager.exwm.enable = true; https://github.com/ch11ng/exwm https://github.com/emacs-evil/evil Adding this to init.el enables Evil Mode and EXWM, this assumes use of Straight.el package manager and Use package. (server-start) (use-package exwm :init :config (setq exwm-workspace-show-all-buffers t) (setq exwm-layout-show-all-buffers t) (add-hook \u0026#39;exwm-update-class-hook (lambda () (exwm-workspace-rename-buffer exwm-class-name))) (with-eval-after-load \u0026#39;evil (evil-set-initial-state \u0026#39;exwm-mode \u0026#39;motion)) ;; do not forward anything besides keys defined with ;; `exwm-input-set-key\u0026#39; and `exwm-mode-map\u0026#39; (setq exwm-input-prefix-keys \u0026#39;()) (exwm-enable)) (use-package evil :init (setq evil-want-integration t evil-want-keybinding nil evil-want-C-u-scroll t evil-want-C-i-jump nil evil-respect-visual-line-mode t evil-undo-system \u0026#39;undo-tree) :config (evil-mode 1) (define-key evil-insert-state-map (kbd \u0026#34;C-g\u0026#34;) \u0026#39;evil-normal-state) (define-key evil-insert-state-map (kbd \u0026#34;C-h\u0026#34;) \u0026#39;evil-delete-backward-char-and-join)) (use-package evil-collection) ; Replaces the Default Undo System. (use-package undo-tree) (global-undo-tree-mode 1) Download Links https://www.gnu.org/software/emacs/ https://github.com/doomemacs/doomemacs https://github.com/polybar/polybar Other Useful Programs https://wiki.archlinux.org/title/unclutter Application that hides your cursor when not moving the mouse. https://aur.archlinux.org/packages/xkeysnail Application that allows you to remap key commands for programs. https://xmonad.org/ My preferred non-EXWM tiling window manager, if you are intered in trying on out. ","date":"2022-12-22","externalUrl":null,"permalink":"/posts/2023-01-emacswithexwm/","section":"Posts","summary":"Introduction In my experience, every hobby has a few core… disagreements. Usually these are small and relatively benign differences based on personal preference, with members of that community advocating for their prefered solution.","title":"Diving into Emacs with EXWM","type":"posts"},{"content":"","date":"2022-12-22","externalUrl":null,"permalink":"/tags/emacs/","section":"Tags","summary":"","title":"Emacs,","type":"tags"},{"content":"","date":"2022-12-22","externalUrl":null,"permalink":"/tags/keyboard_centric_workflow/","section":"Tags","summary":"","title":"Keyboard_Centric_Workflow","type":"tags"},{"content":"","date":"2022-12-17","externalUrl":null,"permalink":"/series/art-180/","section":"Series","summary":"","title":"Art-180","type":"series"},{"content":"","date":"2022-12-17","externalUrl":null,"permalink":"/tags/nix/","section":"Tags","summary":"","title":"Nix","type":"tags"},{"content":" TODO Art-180 With the start of the new year come New Years resolutions. This year mine is to start doing art on a regular basis. While I have some expirence with painting, my interest is sculpture. I also want to establish a strong foundation in art fundamentals. So with that in mind, I am going to start with drawing. More specifically I am going to follow the lessons laid out in the book [The Natural Way to Draw](https://www.goodreads.com/book/show/3061.The_Natural_Way_to_Draw). With one major change. I plan on doing the lessons digitally, specifically using an open source program called [Krita](https://krita.org/en/), and a [Wacom Intuos Pro](https://estore.wacom.com/en-US/wacom-intuos-pro-l-us-pth860.html). I am calling this project [Art-180](https://github.com/Iron-Shark/Art-180), and I hope to publish all of the art I create during this project on my [GitHub](https://github.com/Iron-Shark). In an attempt to show the real time progression of a total novice, over 6 months of organized practice. I also plan to to create one \u0026#34;finished work\u0026#34; on the weekend which will be published on this blog, along with a short recap of the weeks exercises, summary of any highlights, and generally my thoughts on things are progressing.\nThis article focuses on how I have configure my workstation to support this project. Including my Krita, Tablet, and any general Operating System configurations that are relevant.\nSystem Configuration As usual installing programs with Nix is easy. I simply add them to my packages list in https://github.com/Iron-Shark/Technonomicon/blob/main/vortex.org. https://krita.org/en/ is my preferred art program. It\u0026#39;s free, fully featured, and open source with a strong contributor community.\nhome.package = with pkgs; [ krita wacomtablet ]; Tablet Configuration Again using Nix to manage things. This time, I use home-manager to create a file that holds a script. Which binds all of my wacom express keys to specific actions. This script also has a system alias, since the tablet needs to be plugged in on start up for the script to work.\nhome.file.\u0026#34;wacom-tablet-bindings.sh\u0026#34; = { target = \u0026#34;.config/system-scripts/wacom-tablet-bindings.sh\u0026#34;; executable = true; text = \u0026#39;\u0026#39; #!/bin/bash ## Upper group of exprss keys xsetwacom set \u0026#34;Wacom Intuos Pro L Pad pad\u0026#34; Button 1 \u0026#34;key tab\u0026#34; xsetwacom set \u0026#34;Wacom Intuos Pro L Pad pad\u0026#34; Button 3 \u0026#34;key +control s -control\u0026#34; xsetwacom set \u0026#34;Wacom Intuos Pro L Pad pad\u0026#34; Button 2 \u0026#34;key insert\u0026#34; xsetwacom set \u0026#34;Wacom Intuos Pro L Pad pad\u0026#34; Button 8 \u0026#34;key alt\u0026#34; ## Center Button xsetwacom set \u0026#34;Wacom Intuos Pro L Pad pad\u0026#34; Button 13 \u0026#34;key +control z -control\u0026#34; ### This configuration leaves the default zoom-in/out touch ring bindings ## Lower group of express keys xsetwacom set \u0026#34;Wacom Intuos Pro L Pad pad\u0026#34; Button 9 \u0026#34;key +shift\u0026#34; xsetwacom set \u0026#34;Wacom Intuos Pro L Pad pad\u0026#34; Button 10 \u0026#34;key +control\u0026#34; xsetwacom set \u0026#34;Wacom Intuos Pro L Pad pad\u0026#34; Button 11 \u0026#34;key +t\u0026#34; xsetwacom set \u0026#34;Wacom Intuos Pro L Pad pad\u0026#34; Button 12 \u0026#34;key +b\u0026#34; ## Pen Controls xsetwacom set \u0026#34;Wacom Intuos Pro L Pen stylus\u0026#34; Button 3 \u0026#34;Key +e\u0026#34; # Toggles eraser mode on/off xsetwacom set \u0026#34;Wacom Intuos Pro L Pen eraser\u0026#34; Button 1 \u0026#34;key +p\u0026#34; # Horizontally mirrors canvas \u0026lt;- Rebind this to something else. I dont like the eraser key \u0026#39;\u0026#39;; }; Since I use EXWM as my window manager, I have Emacs run the script as a shell command on system start up.\n(start-process-shell-command \u0026#34;Wacom Tablet Start\u0026#34; \u0026#34;*Messages*\u0026#34; \u0026#34;bash ~/.config/system-scripts/wacom-tablet-bindings.sh\u0026#34;) Krita Configuration Here is where things get a little more complicated. I am still using Nix to manage my Krita files, and that work as you would expect. There is one fairly significant downside though. Since Krita primarily uses its own GUI for configuration changes. Any changes made in the program will not be reflect back into the template file in https://github.com/Iron-Shark/Technonomicon, and those changes will be overwritten the next time you run nixos-rebuild switch. The solution to this is simple, manually update the template file by copying the changes from .config/kritarc. Long term, once I have my settings mostly figured out. I doubt that this will be an issue at all, but it is less than perfect. Especially right now at the start when I am going to be frequently changing my settings.\nhome.file.\u0026#34;kritarc\u0026#34; = { source = ./Krita/kritarc; target = \u0026#34;.config/kritarc\u0026#34;; }; Conclusion Generally I am super happy with this set up. Needing to manual copy the Krita configuration files is a bit of an inconvenience, but a very temporary one. As usually with things like this, I end up making a lot of changes in the beginning and then only occasional changes after that. Krita being free is a huge benefit as it massively lowers the bar to entry compared to Photoshop. Generally I am looking forward to starting this project.\n","date":"2022-12-17","externalUrl":null,"permalink":"/posts/2023-01-wacomonlinux/","section":"Posts","summary":"TODO Art-180 With the start of the new year come New Years resolutions. This year mine is to start doing art on a regular basis. While I have some expirence with painting, my interest is sculpture.","title":"Using NixOS for Art","type":"posts"},{"content":"","date":"2022-09-13","externalUrl":null,"permalink":"/tags/functional/","section":"Tags","summary":"","title":"Functional","type":"tags"},{"content":"","date":"2022-09-13","externalUrl":null,"permalink":"/tags/linux_for_beginners/","section":"Tags","summary":"","title":"Linux_for_beginners,","type":"tags"},{"content":" As someone who is still trying to break into the world of Linux Power Users, System Admins, and Programmers. I have often found myself needing to reinstall my operating system. Usually to reset dependencies broken by trying to install a new package, or otherwise change my system. This was slow, time consuming, and a deterrent to experimentation. NixOS offers a solution, functional package management.\nNixos is one of two GNU/Linux distributions that use a functional package management system. I plan on writing about the specifics of this in a separate post, so for now I will focus on the effects of it. Rather than install binaries globally. They are kept in a separate directory called the Nix store, and are then connected to the user environment and other applications via symlinks. This provides three main benefits.\nFirst, atomic upgrades. There is no change to existing packages during an up date. So there is no chance for a package to be broken by a system interruption. Second, you can have multiple versions of a package installed simultaneously, and be able to actively use them all. Third, and most importantly to me. You can revert to an earlier system configuration. NixOS uses a system called generations. So if I install a package and find that it creates issues with my existing system, I can revert those changes without worrying about lost or changed dependencies. Greatly increasing my confidence in experimentation.\nInstallation was extremely easy. They recently released a new GUI installer that was even easier to use than the previous one. The ability to declarative install packages using /etc/nixos/configuration.nix makes keeping track of what changes I am making way simpler, than with an imperative installer like apt. My plan is to use NixOS as a learning tool. Starting with simple skills like using a tiling window manager, and terminal based system configuration tools. Before eventually moving on to things like basic programming skills, setting up a development environment, and living in Emacs.\nCurrently I am using Xmonad nested within XFCE4. A combination I would strongly recommend to any beginner considering switching to a tiling window manager for the first time. It is easily configurable in NixOS by adding a single line to your /etc/nixos/configuration.nix and then selecting the combination from the login greeter. In particular being able to use and learn Xmonads controls while still having the GUI configuration appletts for things like Wifi and sound makes life a lot easier. The only issue I have found is that you can not use the default M-S-q (alt-shift-q) to log out. As this will freeze your workspace, and require a hard reboot. I have linked my configuration file repository below.\nGithub Repository : https://github.com/Iron-Shark/Technonomicon\n","date":"2022-09-13","externalUrl":null,"permalink":"/posts/2023-01-nixosfirstimpressions/","section":"Posts","summary":"As someone who is still trying to break into the world of Linux Power Users, System Admins, and Programmers. I have often found myself needing to reinstall my operating system.","title":"NixOS First Impressions","type":"posts"},{"content":" Linux based operating systems, including Debian, Arch, and NixOS are being used by an increasing number of people without a technical background. These operating systems have a reputation of requiring a high level of knowledge simply to perform common user actions, making them somewhat unapproachable for the beginner. The common wisdom given to someone who wants to begin learning how to use a Linux based system is to install it on a spare computer, or to dual boot your current computer. In my experience neither of these options do a great job of creating a friendly learning environment.\nThe problem that I experienced with both of these methods is that simply starting to practice required time and effort that often deterred me from actually doing so. Once practicing I was completely locked out of my normal operating system and the tools I was used to using with Windows OS. I often found myself frustrated and quitting after only a small amount of practice. Having found myself \u0026#34;locked\u0026#34; in an operating system I could barely get to function. As a non-tech user diving into the terminal was overwhelming. The solution in my case came from an unexpected source, Windows Subsystem for Linux.\nWindows Subsystem for Linux commonly referred to as WSL and, WSL2 it\u0026#39;s more fully featured successor provide what I believe was the key to my successfully learning the core skills required by Linux based operating systems. Ease of practice. I was suddenly able to use a Linux terminal in my normal Windows workspace, and treat it as I would any other tool. I could have it open in the background and dedicate short busts of time to learning the basics, while using my already configured Windows tools to search for answers to problems, and take notes. Then as I became more comfortable, I was able to use Remote Desktop Protocol (RDP) to do the same with a full virtual machine.\nThe other tool that really helped me was the website LinuxJourney.com . This site provides a solid foundation of knowledge, and an easy to follow path to progress through. While using WSL2 to practice the commands as I learned them. Together these simplified things enough that it felt easy to practice, and I quickly felt comfortable enough to make the jump to a full time Linux desktop.\nThe key was I didn\u0026#39;t need any knowledge of these things prior to this to set it up. It can be overwhelming to a novice to be confronted with a new subject and get stuck in a loop of \u0026#34;if I want to learn this, then I need to learn that first\u0026#34;. I will link the used guides below, but it was all extremely simple for a normal Windows user. I think the ability for a non-power user to follow simple guides to set something like this up, and be able to practice is what makes WSL such a great tool for people looking to learn more about Computer Science, Programming, or System Administration.\nResources These are the resources I found most helpfull while going through this process.\nhttps://linuxjourney.com : A great tutorial website I used to learn the basics of Linux. https://docs.microsoft.com/en-us/windows/wsl/install : Windows Documentation on WSL. https://www.youtube.com/watch?v=_fntjriRe48 : Video guide for first time configuration of WSL. https://www.youtube.com/watch?v=IL7Jd9rjgrM\u0026amp;t=182s : Video guide for setting up a RDP connection. ","date":"2022-09-04","externalUrl":null,"permalink":"/posts/2023-01-linuxjourney/","section":"Posts","summary":"Linux based operating systems, including Debian, Arch, and NixOS are being used by an increasing number of people without a technical background. These operating systems have a reputation of requiring a high level of knowledge simply to perform common user actions, making them somewhat unapproachable for the beginner.","title":"A beginners doorway to Linux.","type":"posts"},{"content":" As a part of writing the \u0026#34;https://ironshark.org/technology/2022/09/04/linux-journey.html\u0026#34; article, and my larger project of switching to https://nixos.org/ for daily use. I decided to go through all of the https://linuxjourney.com/ lessons again. This time from the perspective of someone familiar with the fundamentals, and experienced with basic use of a Linux based operating system. For perspective I have basic user experience with both https://www.debian.org/ and https://archlinux.org/, and have used both as my primary operating system.\nMy overall impression remains that it is a great resource. I wanted to add an additional caveat to that though. If you are simply trying to get your feet wet, or do simple interactions with a Linux machine that is maintained for you. Then it is likely enough to give you the skills needed to interact with a preconfigured system. If however you are trying to configure a personal computer, or build a set of tools for professional projects. Then you are definitely going to need an additional resource, namely. Your chosen distribution\u0026#39;s user manual.\nI mention this specifically because it is something that could be easily overlooked or misunderstood by someone coming from a Windows OS background. This is due to the fact that Linux is only the core of the operating system. So fittingly Linux Journey really only discusses the Linux core utilities that are found on almost all distributions, with only a passing mention of the differences between them. It will teach how to use the tools that come with Linux, but not what to do with those tools to achieve your goals. Overall, I\u0026#39;m glad I went through the tutorials again. I feel like I picked up a bit more information now that I have the context to appreciate, and my opinion overall is the same. Linux Journey is an excellent resource. Just make sure that you are also consulting your chosen disto\u0026#39;s user manual, FAQ\u0026#39;s, and tutorials.\n","date":"2022-09-04","externalUrl":null,"permalink":"/posts/2023-01-linuxjourneyretrospective/","section":"Posts","summary":"As a part of writing the \u0026#34;https://ironshark.org/technology/2022/09/04/linux-journey.html\u0026#34; article, and my larger project of switching to https://nixos.org/ for daily use. I decided to go through all of the https://linuxjourney.com/ lessons again.","title":"A Linux Journey Retrospective","type":"posts"},{"content":"","date":"2022-09-04","externalUrl":null,"permalink":"/tags/linux_for_beginners/","section":"Tags","summary":"","title":"Linux_for_beginners","type":"tags"},{"content":"","date":"2022-09-04","externalUrl":null,"permalink":"/categories/personal/","section":"Categories","summary":"","title":"Personal","type":"categories"},{"content":"","date":"2022-09-04","externalUrl":null,"permalink":"/tags/site_update/","section":"Tags","summary":"","title":"Site_Update","type":"tags"},{"content":" Personal blogging can take a lot of forms, and the goals for each site can vary wildly from person to person. For me, those goals are.\nCreate a public facing outlet for written works. This isn\u0026#39;t to say that I expect this blog to become wildly popular. I don\u0026#39;t. Rather the \u0026#34;threat\u0026#34; of unknown people seeing what I have written encourages me to try and publish things in a finished state. Having never really needed to do that before I hope that this will improve my writing, storytelling, and general communication skills. Largely it amounts to a creative writing exercise.\nShare project reports, and the lessons learned from them. In the hopes that others can one day avoid the mistakes I make as part of my learning process. More generally, I hope that the process of creating these reports will encourage me to better document my projects for later reference, and to be able to share that information with friends and collaborators. Also having a measurable sense of progress on those projects could be a great source of motivation.\nCreate a personal \u0026amp; professional gallery of completed work. This is a longer term goal, but as I complete more projects. I hope to begin curating them into a gallery or portfolio highlighting my major achievements. The overall goal being that the contents of my about me page, which should also include a CV will act as an introduction to my body of work.\n","date":"2022-09-04","externalUrl":null,"permalink":"/posts/2023-01-whyblog/","section":"Posts","summary":"Personal blogging can take a lot of forms, and the goals for each site can vary wildly from person to person. For me, those goals are.\nCreate a public facing outlet for written works.","title":"Who, what, and Why. Creating a personal blog.","type":"posts"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"}]